public class FetchExtractedTextWithDelayJob implements Queueable, Database.AllowsCallouts { 

    private String ocrDocumentScanResultId;
    private String contentDocumentId;

    // Constructor to pass the parameters to the queueable job
    public fetchExtractedTextWithDelayJob(String ocrDocumentScanResultId, String contentDocumentId) {
        this.ocrDocumentScanResultId = ocrDocumentScanResultId;
        this.contentDocumentId = contentDocumentId;
    }

    // Implement the execute method
    public void execute(QueueableContext context) {
        // Call the fetchExtractedText method inside the execute method
        fetchExtractedText(ocrDocumentScanResultId, contentDocumentId);
    }

    // This method fetches the extracted text using the fetchExtractedText API
private String fetchExtractedText(String ocrDocumentScanResultId, String contentDocumentId) {
    Http http = new Http();
    HttpRequest request = new HttpRequest();

    // Salesforce REST API endpoint to fetch extracted text using the OCR result ID
    String endpointUrl = '/services/data/v58.0/actions/standard/fetchExtractedText';

    // Prepare the request body as a JSON string
    String requestBody = JSON.serialize(new Map<String, Object>{
        'inputs' => new List<Map<String, Object>>{
            new Map<String, Object>{
                'ocrDocumentScanResultId' => ocrDocumentScanResultId,  // OCR result ID obtained from the first step
                'contentDocumentId' => contentDocumentId,  // Ensure you pass the contentDocumentId as well
                'startPageIndex' => 1,  // Start from page 1
                'endPageIndex' => 20   // You can change the number of pages to extract
            }
        }
    });

    // Set up the HTTP request
    request.setEndpoint(URL.getOrgDomainUrl().toExternalForm() + endpointUrl);  // Combine Salesforce base URL with the endpoint
    request.setMethod('POST');
    request.setHeader('Content-Type', 'application/json');
    request.setHeader('Authorization', 'Bearer ' + UserInfo.getSessionId());  // Use the session ID for authorization
    request.setBody(requestBody);

    // Send the HTTP request
    HttpResponse response = http.send(request);

    // Log the response for debugging
    System.debug('Extracted Text API response: ' + response.getBody());

    // Handle the response
    if (response.getStatusCode() == 200) {
        // Deserialize the response body into a List<Object> (as per your requirement)
        List<Object> responseList = (List<Object>) JSON.deserializeUntyped(response.getBody());

        // Check if the response list is not empty
        if (responseList != null && !responseList.isEmpty()) {
            // Get the first item in the response list
            Map<String, Object> firstResult = (Map<String, Object>) responseList.get(0);

            // Check if 'outputValues' key exists and contains 'ocrDocumentScanResultDetails'
            if (firstResult.containsKey('outputValues')) {
                Map<String, Object> outputValues = (Map<String, Object>) firstResult.get('outputValues');
                if (outputValues.containsKey('ocrDocumentScanResultDetails')) {
                    // Change: Deserialize the 'ocrDocumentScanResultDetails' as a List<Object> instead of List<Map<String, Object>>
                    Map<String, Object> detailsList = (Map<String, Object>) outputValues.get('ocrDocumentScanResultDetails');

                    System.debug('Extracted Text: ' + detailsList);
                    return detailsList.toString(); // Returning the extracted text (you can further process it if needed)
					 
                }
            }
            System.debug('No OCR document scan result details found.');
            return null;
        } else {
            System.debug('No extracted text found.');
            return null;
        }
    } else {
        System.debug('Error calling Extracted Text API, status: ' + response.getStatus() + ', body: ' + response.getBody());
        return null;
    }
}

 private void insertNewProfitAndLossRecord(String ocrResult) {
        try {
            Profit_and_Loss__c newRecord = new Profit_and_Loss__c();
// Deserialize the response as a Map<String, Object>
Map<String, Object> responseMap = (Map<String, Object>) JSON.deserializeUntyped(ocrResult);

// Check if 'ocrDocumentScanResultDetails' is present and handle the list inside it
if (responseMap.containsKey('ocrDocumentScanResultDetails')) {
    List<Map<String, Object>> ocrDetailsList = (List<Map<String, Object>>) responseMap.get('ocrDocumentScanResultDetails');
    
    // Process each item in the list
    for (Map<String, Object> ocrDetail : ocrDetailsList) {
        // Process the OCR details
        System.debug('OCR Detail: ' + ocrDetail);
    }
} else {
    System.debug('No OCR details found in the response.');
}

            // Optionally associate with a related record passed in the job
            // if(recordId != null) {
            //     // Assuming you have a lookup field to associate
            //     newRecord.Related_Record__c = recordId;
            // }

            insert newRecord;
            System.debug('Inserted Profit_and_Loss__c record with Id: ' + newRecord.Id);

        } catch(Exception ex){
            System.debug('Failed to insert Profit_and_Loss__c record: ' + ex.getMessage());
        }
    }


}
