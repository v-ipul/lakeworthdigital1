public class OCRProcessor implements Queueable, Database.AllowsCallouts {
    String contentDocumentId;

    public OCRProcessor(String contentDocumentId) {
        this.contentDocumentId = contentDocumentId;
    }

    public void execute(QueueableContext context) {
        // Step 1: Initiate OCR Extraction using the invocable action
        Map<String, Object> requestMap = new Map<String, Object>{
            'contentDocumentId' => contentDocumentId,
            'ocrService' => 'AMAZON_TEXTRACT',  // Use AWS Textract
            'startPageIndex' => 1,
            'endPageIndex' => 20  // Adjust page range as needed
        };

        // Sending request to the InitiateTextExtraction endpoint
        String endpoint = '/services/data/vXX.X/actions/standard/initiateTextExtraction';
        Map<String, Object> responseMap = sendRequestToRestApi(endpoint, requestMap);

        if (responseMap.containsKey('ocrDocumentScanResultDetails')) {
            List<String> scanResultIds = (List<String>) responseMap.get('ocrDocumentScanResultDetails');
            // After OCR extraction is initiated, enqueue job to fetch the results
            System.enqueueJob(new OCRFetchAndStore(contentDocumentId, scanResultIds));
        }
    }

    // Utility method to send a REST API request
    private static Map<String, Object> sendRequestToRestApi(String endpoint, Map<String, Object> bodyMap) {
        HttpRequest req = new HttpRequest();
        req.setEndpoint(URL.getOrgDomainUrl().toExternalForm() + endpoint);
        req.setMethod('POST');
        req.setHeader('Authorization', 'Bearer ' + UserInfo.getSessionId());
        req.setHeader('Content-Type', 'application/json');
        req.setBody(JSON.serialize(bodyMap));

        Http http = new Http();
        HttpResponse res = http.send(req);

        return (Map<String, Object>) JSON.deserializeUntyped(res.getBody());
    }
}
