public class OCRFetchAndStore implements Queueable, Database.AllowsCallouts {
    String contentDocumentId;
    List<String> scanResultIds;

    public OCRFetchAndStore(String contentDocumentId, List<String> scanResultIds) {
        this.contentDocumentId = contentDocumentId;
        this.scanResultIds = scanResultIds;
    }

    public void execute(QueueableContext context) {
        // Step 2: Fetch the extracted text
        Map<String, Object> requestMap = new Map<String, Object>{
            'contentDocumentId' => contentDocumentId,
            'ocrDocumentScanResultIds' => scanResultIds
        };

        // Fetch the extracted text
        String endpoint = '/services/data/vXX.X/actions/standard/fetchExtractedText';
        Map<String, Object> responseMap = sendRequestToRestApi(endpoint, requestMap);

        // Step 3: Parse the extracted text and map it to fields
        Map<String, String> extractedData = extractText(responseMap);

        // Step 4: Use Fetch Active OCR Templates Action to get the active template for the document
        List<String> documentTypeIds = new List<String>{'0deT10000004CCbIAM'}; // Customize this if needed
        Map<String, Object> templateRequestMap = new Map<String, Object>{
            'documentTypeId' => documentTypeIds
        };

        String templateEndpoint = '/services/data/vXX.X/actions/standard/fetchActiveOcrTemplates';
        Map<String, Object> templateResponseMap = sendRequestToRestApi(templateEndpoint, templateRequestMap);

        // Step 5: Map the OCR template to the target object and save the record
        saveRecord(extractedData);
    }

    private static Map<String, String> extractText(Map<String, Object> responseMap) {
        Map<String, String> extractedData = new Map<String, String>();
        // Extract key-value pairs from the OCR response and map them to appropriate fields
        List<Object> keyValuePairs = (List<Object>) responseMap.get('keyValuePairs');
        for (Object kvPair : keyValuePairs) {
            Map<String, Object> pair = (Map<String, Object>) kvPair;
            String key = (String) pair.get('key');
            String value = (String) pair.get('value');
            extractedData.put(key, value);
        }
        return extractedData;
    }

    // Save the extracted data in Salesforce records (e.g., Case, Contact)
    private void saveRecord(Map<String, String> extractedData) {
        Case caseRecord = new Case(
            Status = 'New',
            Origin = 'OCR Upload',
            Subject = 'Document Processed by OCR'
        );

        // Map extracted data to fields
        if (extractedData.containsKey('Issued On')) {
            caseRecord.Issued_On__c = extractedData.get('Issued On');
        }
        // Add other field mappings as needed

        insert caseRecord;
    }

    // Utility method to send a REST API request
    private static Map<String, Object> sendRequestToRestApi(String endpoint, Map<String, Object> bodyMap) {
        HttpRequest req = new HttpRequest();
        req.setEndpoint(URL.getOrgDomainUrl().toExternalForm() + endpoint);
        req.setMethod('POST');
        req.setHeader('Authorization', 'Bearer ' + UserInfo.getSessionId());
        req.setHeader('Content-Type', 'application/json');
        req.setBody(JSON.serialize(bodyMap));

        Http http = new Http();
        HttpResponse res = http.send(req);

        return (Map<String, Object>) JSON.deserializeUntyped(res.getBody());
    }
}
