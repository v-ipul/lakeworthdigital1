public class TransformDocument {

    @InvocableMethod(label='Create Profit and Loss Record from OCR' description='Creates a Profit and Loss record using extracted OCR values')
    public static void transform(List<TransformDocumentDetailsRequest> requestList) {
        // Loop through each request object passed from Flow
        for (TransformDocumentDetailsRequest request : requestList) {
            // Get the OCR response based on the content document ID
            List<OcrDocumentScanResult> odsrResponse = getOdsrResponse(request.contentDocumentID);
            
            // Process each document scan result (assuming your OCR template is correctly mapped)
            for (OcrDocumentScanResult ocrScanResult : odsrResponse) {
                // Process the extracted values and store them in the Profit and Loss object
                Map<String, String> extractedValues = processOcrResponse(ocrScanResult.ExtractedValues);
                
                // Use the target object name provided in the request and save the extracted values
                saveExtractedValuesInTargetObject(request.targetObjectApiName, extractedValues);
            }
        }
    }

    // Fetch the OCR document scan result based on content document ID
    private static List<OcrDocumentScanResult> getOdsrResponse(String ContentDocumentID) {
        return [SELECT ExtractedValues FROM OcrDocumentScanResult WHERE ContentDocumentId = :ContentDocumentID];
    }

    // Process the extracted OCR response and map it to target object fields
    private static Map<String, String> processOcrResponse(String extractedValues) {
        Map<String, String> fieldMap = new Map<String, String>();

        // Parse the OCR response to map values to the corresponding fields
        Map<String, Object> jsonMap = (Map<String, Object>) JSON.deserializeUntyped(extractedValues);
        List<Object> keyValuePairs = (List<Object>) jsonMap.get('keyValuePair');
        
        // Dynamically process each extracted key-value pair
        for (Object keyValuePair : keyValuePairs) {
            Map<String, Object> keyValueMap = (Map<String, Object>) keyValuePair;
            Map<String, Object> key = (Map<String, Object>) keyValueMap.get('key');
            String keyText = (String) key.get('text');
            String valueText = (String) ((Map<String, Object>) keyValueMap.get('value')).get('text');
            
            // Add the extracted key-value to the field map
            fieldMap.put(keyText, valueText);
        }
        return fieldMap;
    }

    // Save the extracted values to the target custom object
    private static void saveExtractedValuesInTargetObject(String objectType, Map<String, String> fieldMap) {
        SObject newRecord = (SObject) Type.forName(objectType).newInstance();
        
        // Set each field dynamically based on the mapped key-value pairs
        for (String field : fieldMap.keySet()) {
            newRecord.put(field, fieldMap.get(field));
        }
        
        // Insert the new record into Salesforce
        insert newRecord;
    }
}
